services:
  broker:
    image: apache/kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka-data:/tmp/kraft-combined-logs
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:9092
    depends_on:
      - broker
    networks:
      - kafka-network

  init-kafka:
    image: apache/kafka:latest
    container_name: init-kafka
    depends_on:
      - broker
    entrypoint: [ "sh", "-c",
      "sleep 15 && \
       /opt/kafka/bin/kafka-topics.sh --create --if-not-exists \
       --bootstrap-server broker:9092 \
       --replication-factor 1 \
       --partitions 3 \
       --topic orders" ]
    networks:
      - kafka-network

  postgres-command:
    image: postgres:16
    container_name: postgres-command
    environment:
      POSTGRES_DB: order_command_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Pass.1234
    ports:
      - 5433:5432
#    volumes:
#      - pgdata-command:/var/lib/postgresql/data
    networks:
      - kafka-network

  postgres-query:
    image: postgres:16
    container_name: postgres-query
    environment:
      POSTGRES_DB: order_query_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Pass.1234
    ports:
      - 5434:5432
#    volumes:
#      - pgdata-query:/var/lib/postgresql/data
    networks:
      - kafka-network

  order-command:
    image: order_command
    build:
      context: ./modules/order-command
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - postgres-command
    environment:
      - DB_HOST=postgres-command
      - DB_PORT=5432
      - DB_NAME=order_command_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=Pass.1234
      - SERVER_PORT=8080
      - KAFKA_SERVER=broker:9092
    networks:
      - kafka-network

  order-query:
    image: order_query
    build:
      context: ./modules/order-query
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - postgres-query
    environment:
      - DB_HOST=postgres-query
      - DB_PORT=5432
      - DB_NAME=order_query_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=Pass.1234
      - SERVER_PORT=8081
      - KAFKA_SERVER=broker:9092
    networks:
      - kafka-network

volumes:
  kafka-data:

networks:
  kafka-network:
    driver: bridge